
.thumbnail{
    /*When we change the width, the height is also adjusted so that the image has the same dimensions*/
    /*
    this forces the thumbnail to be 300px
    width: 300px;

    adding this would be useless because it is already at their own line
    display: block;
    */
    width: 100%;
}


.video-title{
    margin-top: 0px;
    font-size: 14px;
    font-weight: 500;
    line-height: 20px;
    margin-bottom: 10px;
}

/*
we don't need these styles since we are doing this same exact thing with the CSS grid
.video-preview{
    width: 300px;
    display: inline-block;
    vertical-align: top;
    margin-right: 15px;
}
*/

.video-info-grid{
    display: grid;
    grid-template-columns: 50px 1fr;
}
/*
NESTED LAYOUT TECHNIQUE

.channel-picture{
    display: inline-block;
    width: 50px;
    vertical-align: top;
    background-color: gray;
}
.video-info{
    display: inline-block;
    width: 200px;
    background-color: gray;
}
*/
.profile-picture{
    width: 36px;
    border-radius: 50%;
}

.thumbnail-row{
    margin-bottom: 8px;
    position: relative;
}
.video-stats,
.video-author{
    font-size: 12px;
    color: rgb(96, 96, 96);
}
.video-author{
    margin-bottom: 4px;
}
.video-grid{
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    column-gap: 16px;
    row-gap: 40px;
    /* This is known as inheritance where the css property can be passed down to inner elements like: */
    /*
    text.decoration: underline;
    border: 2px solid red;
    */
    
    /*This font is being inherited to all of the inner elements of html*/
}

@media(max-width: 750px){
    .video-grid{
        grid-template-columns: 1fr 1fr;
    }
}

@media (min-width: 751px) and (max-width: 999){
    .video-grid{
        grid-template-columns: 1fr 1fr 1fr;
    }
}


@media(min-width: 1000px){
    .video-grid{
        grid-template-columns: 1fr 1fr 1fr 1fr;
    }
}

.video-time{
    font-size: 12px;
    font-weight: 500;
    background-color: black;
    color: white;
    position: absolute;
    bottom: 8px;
    right: 5px;
    /* 
    If we have 1 value for padding it is all 4 direction:
    if we have 2 value for padding, the first value is vertical padding and the second value is horizontal padding
    if we have 4 value for padding, A good way to think about it is starting from the top clockwise if you add 4 value for padding
    */
    padding: 4px;
    border-radius: 2px;
}